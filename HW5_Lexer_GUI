'''
Created by Jorge Ezequiel Garcia Lopez
'''
import tkinter as tk
from tkinter import ttk

import re


def CutOneLineTokens(oneLine):
    # Lexer Logic Patterns
    oneLineList = oneLine.split()
    output_list = []
    output_string = str()

    keyword = re.compile(r'if|else|int|float')
    op = re.compile(r'\+|\*|\/|\=|>')
    stringLit = re.compile(r'\w+|[a-zA-Z0-9]+')
    intLit = re.compile(r'\d+')
    floatLit = re.compile('\d+[.]\d+')
    sepLit = re.compile(r'\(|\)|\'|\\|\/|\:|\;|\"')
    id = re.compile(r'[a-zA-Z][a-zA-Z0-9]*')
    printid = re.compile(r'[print]')

    valid_keyword = False
    keyword_added = False
    possible_string = False
    string_identifier_add = False
    print_sys_call = False

    for x in oneLineList:
        # not a string
        if not valid_keyword and keyword.match(x) is not None:
            valid_keyword = True
            keyword_added = True
            output_list.append("<keyword>, <%s>" % x)
            continue
        if valid_keyword and keyword_added:  # starts with second token
            temp = x
            temp_len = len(temp)
            # process
            while len(temp) != 0:
                if id.match(temp) is not None:
                    output_string = re.search(id, temp)
                    temp = temp[output_string.end():]
                    output_list.append("<identifier>, <%s>" % output_string.group(0))
                elif op.match(temp) is not None:
                    output_string = re.search(op, temp)
                    temp = temp[output_string.end():]
                    output_list.append("<operator>, <%s>" % output_string.group(0))
                elif sepLit.match(temp) is not None:
                    output_string = re.search(sepLit, temp)
                    temp = temp[output_string.end():]
                    output_list.append("<separator>, <%s>" % output_string.group(0))
                elif floatLit.match(temp) is not None:
                    output_string = re.search(floatLit, temp)
                    temp = temp[output_string.end():]
                    output_list.append("<float literal>, <%s>" % output_string.group(0))
                elif intLit.match(temp) is not None:
                    output_string = re.search(intLit, temp)
                    temp = temp[output_string.end():]
                    output_list.append("<int literal>, <%s>" % output_string.group(0))
                else:
                    break

        # Check for possible string
        if not valid_keyword and id.match(x) is not None:
            if printid.match(x):
                # either create new formatter function
                    # requires x argument to be modified within formatter()
                    # returns list of formatted tokens
                # or process directly here
               output_list = print_call()
               continue

            output_list.append("<identifier>, <%s>" % x)
            possible_string = True
            string_identifier_add = True
            continue
        if possible_string and string_identifier_add:
            temp = x
            # process
            while len(temp) != 0:
                if op.match(temp) is not None:
                    output_string = re.search(op, temp)
                    temp = temp[output_string.end():]
                    output_list.append("<operator>, <%s>" % output_string.group(0))
                elif sepLit.match(temp) is not None:
                    output_string = re.search(sepLit, temp)
                    temp = temp[output_string.end():]
                    output_list.append("<separator>, <%s>" % output_string.group(0))
                elif stringLit.match(temp) is not None:
                    output_string = re.search(stringLit, temp)
                    temp = temp[output_string.end():]
                    output_list.append("<string literal>, <%s>" % output_string.group(0))
                else:
                    break
        if print_sys_call:
            # validate sys call
            print("System call")
    return output_list

def print_call():
    new_list = ["Sys call"]
    return new_list

# Create the root window
root = tk.Tk()

root.title("Lexical Analyzer for TinyPie")
root.columnconfigure(0, weight=1)

##############################################
# Input Form
##############################################
input_frame = ttk.Frame(root)
input_frame.grid(padx=10, pady=20, sticky=tk.W + tk.E)
input_frame.columnconfigure(0, weight=1)

##############################################
# Source Code Input Frame
##############################################
code_Frame = ttk.LabelFrame(input_frame, text="TinyPie Code:")
code_Frame.grid(sticky=(tk.W + tk.E))
code_Frame.columnconfigure(0, weight=1)

code_input = tk.Text(code_Frame, width=75, height=10)
code_input.grid(sticky=tk.W + tk.E)
line_number = tk.IntVar()  # naive solution

##############################################
# Gets code from Code Frame to display to Lexer Frame
##############################################

ttk.Label(code_Frame, text="Current Processing Line: ").grid(row=1, column=0, sticky=tk.SW)
ttk.Label(code_Frame, textvariable=line_number).grid(row=1, column=0, sticky=tk.SE)


##############################################
# Gets Next line of text
# Prints the line of text to the output window
##############################################
def getNextLine():
    global line_number
    line_of_code = code_input.get("1.0", "end-1c")
    lines = line_of_code.split('\n')
    try:
        # use Lexer function
        temp = CutOneLineTokens(lines[line_number.get()])
        for token in temp:
            code_output.insert(tk.END, token + "\n")
        line_number.set(line_number.get() + 1)
    except IndexError:
        print("Index Error reached")


ttk.Button(code_Frame, text="Get Next Line", command=getNextLine).grid(row=2, column=0, sticky=tk.SE)

##############################################
# Output Form
##############################################
output_Frame = ttk.Frame(root)
output_Frame.grid(padx=10, pady=20, sticky=tk.W + tk.E)
output_Frame.columnconfigure(0, weight=1)

##############################################
# Source Code Output Frame
##############################################
lexer_Frame = ttk.LabelFrame(output_Frame, text="Analyzed Code: ")
lexer_Frame.grid(sticky=(tk.W + tk.E))
lexer_Frame.columnconfigure(0, weight=1)

code_output = tk.Text(lexer_Frame, width=75, height=10)
code_output.grid(sticky=tk.W + tk.E)
code_output.config(state='normal')

ttk.Label(lexer_Frame, text="").grid(row=1, column=0, sticky=tk.SW + tk.SE)


def quitLexer():
    root.quit()


ttk.Button(lexer_Frame, text="Quit", command=quitLexer).grid(row=2, column=0, sticky=tk.SE)

root.mainloop()
